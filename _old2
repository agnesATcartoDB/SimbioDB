// Modules
var email   = require("emailjs");
var CONFIG  = require("config-heroku");
var cronJob = require('cron').CronJob;
var CartoDB = require('cartodb');
var _u      = require('underscore');
var server  = email.server.connect({
  user:      CONFIG.gmail.email,
  password:  CONFIG.gmail.password,
  host:      "smtp.gmail.com",
  ssl:       true
});
var https = require("https");

// App vars
var groups      = 7;
var start_date  = new Date('2013-10-24');

// Underscore 
_u.templateSettings = {
  interpolate : /\{\{(.+?)\}\}/g
};

// CartoDB client
var client = new CartoDB({
  user:     CONFIG.cartodb.user,
  api_key:  CONFIG.cartodb.api_key
});

client.connect();


// Server
var server = require('./lib/server');



var express = require('express');
var app = express();

app.configure(function(){
  app.set('views', __dirname + '/views');
  app.set('view engine', 'jade'); 
  app.use(express.favicon());
  app.use(express.logger('dev'));
  app.use(express.compress());
  app.use(express.methodOverride());
  app.use(express.bodyParser());
  app.use(express.cookieParser());
  app.use(app.router);
  app.use(express.static('./public', { maxAge: 86400000 })); // One day
});

app.get('/', function(req, res){
  // Get turn
  var actual_week = new Date().getWeekFrom(start_date);
  var turn = actual_week % groups;

  client.query("SELECT team FROM groups WHERE cartodb_id=" + turn, {}, function(err, r){
    
    if (!err && r.rows && r.rows.length > 0) {

      // Get team ids
      var ids = (r.rows[0].team).split(',');
      var where = ' WHERE ';
      for (var i = 0,l = ids.length; i < l; i++) {
        where += ' cartodb_id=' + ids[i] + ' ';
        if (i + 1 < l) where += ' OR '
      }

      client.query("SELECT * FROM crew " + where , {}, function(err, data){
        if (err) data = { rows: [{}] };
        res.render('home', data);
      });

    } else {
      res.render('error');
    }

  });
});

// Error pages //

app.get('/maintenance', function(req, res){
  res.render('maintenance');
});

app.get('/error', function(req, res){
  res.render('error');
});

app.use(function(req, res, next){
  res.render('error', { status: 404, url: req.url });
});

app.use(function(err, req, res, next){
  res.render('error', {
      status: err.status || 500
    , error: err
  });
});


// Parsing message
function parseMessage(msg, data) {
  msg.text                = msg.text.replace('{{ p1_alias }}', data.p1_alias).replace('{{ p2_alias }}', data.p2_alias);
  msg.subject             = msg.subject.replace('{{ p1_alias }}', data.p1_alias).replace('{{ p2_alias }}', data.p2_alias);
  msg.attachment[0].data  = msg.attachment[0].data
    .replace(/{{ p1_twitter }}/g, data.p1_twitter)
    .replace(/{{ p2_twitter }}/g, data.p2_twitter)
    .replace(/{{ p1_alias }}/g, data.p1_alias)
    .replace(/{{ p2_alias }}/g, data.p2_alias)
    .replace(/{{ host }}/g, CONFIG.host);
  return msg;
}